#!/usr/bin/env python3
"""
Fixed Advanced Financial Platform
Sorunlarƒ± √ß√∂z√ºlm√º≈ü ve rate limiting ile √ßalƒ±≈üan versiyon
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

from datetime import datetime, timedelta
import time
import random
from typing import Dict, List, Optional, Tuple

# Page Configuration
st.set_page_config(
    page_title="üèõÔ∏è Fixed Advanced Financial Platform",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fixed Professional CSS Styling
st.markdown("""
<style>
    /* Dark Professional Theme */
    .stApp {
        background: linear-gradient(135deg, #0c1018 0%, #1a1f2e 50%, #2d3748 100%);
        color: #e2e8f0 !important;
    }

    /* Override all Streamlit text colors */
    .stApp, .stApp *, h1, h2, h3, h4, h5, h6, p, div, span, label {
        color: #e2e8f0 !important;
    }

    /* Header Styling */
    .main-header {
        background: linear-gradient(90deg, #2d3748 0%, #4a5568 50%, #2d3748 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        border: 1px solid #4a5568;
        box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        color: #e2e8f0 !important;
    }

    /* Metric Cards */
    .metric-card {
        background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #4a5568;
        margin: 0.5rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        color: #e2e8f0 !important;
    }

    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
    }

    /* Analysis Cards */
    .analysis-card {
        background: linear-gradient(135deg, #2a4365 0%, #3182ce 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 1px solid #4299e1;
        box-shadow: 0 6px 20px rgba(66, 153, 225, 0.2);
        color: #e2e8f0 !important;
    }

    /* ML Cards */
    .ml-card {
        background: linear-gradient(135deg, #553c9a 0%, #805ad5 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 1px solid #9f7aea;
        box-shadow: 0 6px 20px rgba(159, 122, 234, 0.2);
        color: #e2e8f0 !important;
    }

    /* Success Cards */
    .success-card {
        background: linear-gradient(135deg, #276749 0%, #48bb78 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 1px solid #68d391;
        box-shadow: 0 6px 20px rgba(104, 211, 145, 0.2);
        color: #e2e8f0 !important;
    }

    /* Risk Cards */
    .risk-card {
        background: linear-gradient(135deg, #c53030 0%, #f56565 100%);
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        border: 1px solid #fc8181;
        box-shadow: 0 6px 20px rgba(252, 129, 129, 0.2);
        color: #e2e8f0 !important;
    }

    /* Buttons */
    .stButton > button {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white !important;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        background: linear-gradient(135deg, #3182ce 0%, #2c5282 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(49, 130, 206, 0.4);
    }

    /* Sidebar */
    .css-1d391kg {
        background: linear-gradient(180deg, #1a202c 0%, #2d3748 100%);
    }

    /* Text Colors */
    .positive { color: #68d391 !important; font-weight: bold; }
    .negative { color: #fc8181 !important; font-weight: bold; }
    .neutral { color: #a0aec0 !important; font-weight: bold; }

    /* Fix all text */
    .stMetric {
        color: #e2e8f0 !important;
    }
    .stMetric * {
        color: #e2e8f0 !important;
    }
</style>
""", unsafe_allow_html=True)

# Rate Limiting i√ßin cache
@st.cache_data(ttl=300)  # 5 dakika cache
def get_stock_data_cached(symbol: str, period: str = "1y"):
    """Rate limiting ile veri √ßekme"""
    try:
        # Random delay to avoid rate limiting
        time.sleep(random.uniform(0.1, 0.5))

        stock = yf.Ticker(symbol)
        data = stock.history(period=period)
        info = stock.info

        if data.empty:
            return None, None

        return data, info
    except Exception as e:
        st.error(f"Veri √ßekme hatasƒ±: {str(e)}")
        return None, None

# Expanded ETF List
def get_expanded_etf_list():
    """Geni≈ületilmi≈ü ETF listesi"""
    return {
        # US Market ETFs
        'SPY': 'SPDR S&P 500 ETF',
        'QQQ': 'Invesco QQQ Trust',
        'IWM': 'iShares Russell 2000 ETF',
        'VTI': 'Vanguard Total Stock Market ETF',
        'VOO': 'Vanguard S&P 500 ETF',
        'VEA': 'Vanguard FTSE Developed Markets ETF',
        'VWO': 'Vanguard FTSE Emerging Markets ETF',
        'IVV': 'iShares Core S&P 500 ETF',

        # Sector ETFs
        'XLK': 'Technology Select Sector SPDR Fund',
        'XLF': 'Financial Select Sector SPDR Fund',
        'XLE': 'Energy Select Sector SPDR Fund',
        'XLV': 'Health Care Select Sector SPDR Fund',
        'XLI': 'Industrial Select Sector SPDR Fund',
        'XLY': 'Consumer Discretionary Select Sector SPDR Fund',
        'XLP': 'Consumer Staples Select Sector SPDR Fund',
        'XLU': 'Utilities Select Sector SPDR Fund',
        'XLB': 'Materials Select Sector SPDR Fund',
        'XLRE': 'Real Estate Select Sector SPDR Fund',
        'XLC': 'Communication Services Select Sector SPDR Fund',

        # Technology ETFs
        'VGT': 'Vanguard Information Technology ETF',
        'SOXX': 'iShares PHLX Semiconductor ETF',
        'SMH': 'VanEck Vectors Semiconductor ETF',
        'QTEC': 'First Trust NASDAQ-100 Technology Sector Index Fund',
        'FTEC': 'Fidelity MSCI Information Technology Index ETF',
        'IGM': 'iShares Expanded Tech Sector ETF',
        'IYW': 'iShares U.S. Technology ETF',

        # International ETFs
        'EEM': 'iShares MSCI Emerging Markets ETF',
        'EFA': 'iShares MSCI EAFE ETF',
        'FXI': 'iShares China Large-Cap ETF',
        'EWJ': 'iShares MSCI Japan ETF',
        'EWG': 'iShares MSCI Germany ETF',
        'EWU': 'iShares MSCI United Kingdom ETF',
        'INDA': 'iShares MSCI India ETF',

        # Fixed Income ETFs
        'TLT': 'iShares 20+ Year Treasury Bond ETF',
        'IEF': 'iShares 7-10 Year Treasury Bond ETF',
        'SHY': 'iShares 1-3 Year Treasury Bond ETF',
        'LQD': 'iShares iBoxx $ Investment Grade Corporate Bond ETF',
        'HYG': 'iShares iBoxx $ High Yield Corporate Bond ETF',
        'JNK': 'SPDR Bloomberg Barclays High Yield Bond ETF',
        'AGG': 'iShares Core U.S. Aggregate Bond ETF',
        'BND': 'Vanguard Total Bond Market ETF',

        # Commodity ETFs
        'GLD': 'SPDR Gold Shares',
        'SLV': 'iShares Silver Trust',
        'USO': 'United States Oil Fund',
        'DBA': 'Invesco DB Agriculture Fund',
        'DBB': 'Invesco DB Base Metals Fund',
        'UNG': 'United States Natural Gas Fund',
        'PDBC': 'Invesco Optimum Yield Diversified Commodity Strategy No K-1 ETF',

        # Dividend ETFs
        'SCHD': 'Schwab US Dividend Equity ETF',
        'VYM': 'Vanguard High Dividend Yield ETF',
        'DVY': 'iShares Select Dividend ETF',
        'HDV': 'iShares Core High Dividend ETF',
        'NOBL': 'ProShares S&P 500 Dividend Aristocrats ETF',
        'VIG': 'Vanguard Dividend Appreciation ETF',
        'DGRO': 'iShares Core Dividend Growth ETF',

        # Growth ETFs
        'VUG': 'Vanguard Growth ETF',
        'IVW': 'iShares Core S&P 500 Growth ETF',
        'VOOG': 'Vanguard S&P 500 Growth ETF',
        'SPYG': 'SPDR Portfolio S&P 500 Growth ETF',

        # Value ETFs
        'VTV': 'Vanguard Value ETF',
        'IVE': 'iShares Core S&P 500 Value ETF',
        'VOOV': 'Vanguard S&P 500 Value ETF',
        'SPYV': 'SPDR Portfolio S&P 500 Value ETF',

        # Thematic ETFs
        'ARKK': 'ARK Innovation ETF',
        'ARKQ': 'ARK Autonomous Technology & Robotics ETF',
        'ARKW': 'ARK Next Generation Internet ETF',
        'ICLN': 'iShares Global Clean Energy ETF',
        'JETS': 'U.S. Global Jets ETF',
        'HACK': 'ETFMG Prime Cyber Security ETF',
        'ROBO': 'ROBO Global Robotics and Automation Index ETF'
    }

# Expanded Stock List
def get_expanded_stock_list():
    """Geni≈ületilmi≈ü hisse listesi"""
    return {
        # Mega Cap
        'AAPL': 'Apple Inc.',
        'MSFT': 'Microsoft Corporation',
        'GOOGL': 'Alphabet Inc. Class A',
        'GOOG': 'Alphabet Inc. Class C',
        'AMZN': 'Amazon.com Inc.',
        'TSLA': 'Tesla Inc.',
        'META': 'Meta Platforms Inc.',
        'NVDA': 'NVIDIA Corporation',
        'BRK-B': 'Berkshire Hathaway Inc. Class B',
        'UNH': 'UnitedHealth Group Incorporated',

        # Technology
        'AMD': 'Advanced Micro Devices Inc.',
        'INTC': 'Intel Corporation',
        'CRM': 'Salesforce Inc.',
        'ORCL': 'Oracle Corporation',
        'ADBE': 'Adobe Inc.',
        'NFLX': 'Netflix Inc.',
        'CSCO': 'Cisco Systems Inc.',
        'QCOM': 'QUALCOMM Incorporated',
        'AVGO': 'Broadcom Inc.',
        'TXN': 'Texas Instruments Incorporated',

        # Finance
        'JPM': 'JPMorgan Chase & Co.',
        'BAC': 'Bank of America Corporation',
        'WFC': 'Wells Fargo & Company',
        'GS': 'The Goldman Sachs Group Inc.',
        'MS': 'Morgan Stanley',
        'C': 'Citigroup Inc.',
        'AXP': 'American Express Company',
        'V': 'Visa Inc.',
        'MA': 'Mastercard Incorporated',
        'PYPL': 'PayPal Holdings Inc.',

        # Healthcare
        'JNJ': 'Johnson & Johnson',
        'PFE': 'Pfizer Inc.',
        'ABBV': 'AbbVie Inc.',
        'MRK': 'Merck & Co. Inc.',
        'TMO': 'Thermo Fisher Scientific Inc.',
        'ABT': 'Abbott Laboratories',
        'LLY': 'Eli Lilly and Company',
        'BMY': 'Bristol-Myers Squibb Company',
        'AMGN': 'Amgen Inc.',
        'GILD': 'Gilead Sciences Inc.',

        # Consumer
        'KO': 'The Coca-Cola Company',
        'PEP': 'PepsiCo Inc.',
        'WMT': 'Walmart Inc.',
        'PG': 'The Procter & Gamble Company',
        'HD': 'The Home Depot Inc.',
        'MCD': 'McDonald\'s Corporation',
        'NKE': 'NIKE Inc.',
        'SBUX': 'Starbucks Corporation',
        'TGT': 'Target Corporation',
        'COST': 'Costco Wholesale Corporation',

        # Energy
        'XOM': 'Exxon Mobil Corporation',
        'CVX': 'Chevron Corporation',
        'COP': 'ConocoPhillips',
        'EOG': 'EOG Resources Inc.',
        'SLB': 'Schlumberger Limited',
        'PSX': 'Phillips 66',
        'VLO': 'Valero Energy Corporation',
        'MPC': 'Marathon Petroleum Corporation',
        'OXY': 'Occidental Petroleum Corporation',
        'HAL': 'Halliburton Company'
    }

# Simple Technical Analysis
def calculate_simple_indicators(data):
    """Basit teknik g√∂stergeler"""
    if len(data) < 50:
        return {}

    close = data['Close']

    # Moving averages
    sma_20 = close.rolling(window=20).mean().iloc[-1]
    sma_50 = close.rolling(window=50).mean().iloc[-1]

    # RSI (simplified)
    delta = close.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs)).iloc[-1]

    # Current price vs moving averages
    current_price = close.iloc[-1]

    return {
        'sma_20': sma_20,
        'sma_50': sma_50,
        'rsi': rsi,
        'current_price': current_price,
        'above_sma_20': current_price > sma_20,
        'above_sma_50': current_price > sma_50,
        'trend': 'Bullish' if current_price > sma_20 > sma_50 else 'Bearish' if current_price < sma_20 < sma_50 else 'Neutral'
    }

# Simple Pattern Recognition
def detect_simple_patterns(data):
    """Basit pattern tanƒ±ma"""
    if len(data) < 20:
        return {"pattern": "Insufficient data"}

    close = data['Close'].values[-20:]  # Son 20 g√ºn
    high = data['High'].values[-20:]
    low = data['Low'].values[-20:]

    # Trend analizi
    if close[-1] > close[-5] > close[-10]:
        trend = "Strong Uptrend"
        signal = "Bullish"
    elif close[-1] < close[-5] < close[-10]:
        trend = "Strong Downtrend"
        signal = "Bearish"
    else:
        trend = "Sideways"
        signal = "Neutral"

    # Support/Resistance
    recent_high = max(high[-10:])
    recent_low = min(low[-10:])

    return {
        "pattern": trend,
        "signal": signal,
        "resistance": recent_high,
        "support": recent_low,
        "strength": "Medium"
    }

# Risk Metrics
def calculate_risk_metrics(data):
    """Risk metrikleri"""
    if len(data) < 50:
        return {}

    returns = data['Close'].pct_change().dropna()

    # Basic risk metrics
    volatility = returns.std() * np.sqrt(252)  # Annualized
    var_95 = np.percentile(returns, 5)

    # Sharpe ratio (simplified, assuming 2% risk-free rate)
    excess_returns = returns.mean() * 252 - 0.02
    sharpe = excess_returns / volatility if volatility != 0 else 0

    # Max drawdown
    cumulative = (1 + returns).cumprod()
    running_max = cumulative.expanding().max()
    drawdown = (cumulative - running_max) / running_max
    max_drawdown = drawdown.min()

    return {
        'volatility': volatility,
        'var_95': var_95,
        'sharpe_ratio': sharpe,
        'max_drawdown': max_drawdown,
        'current_drawdown': drawdown.iloc[-1]
    }

# Main Application
def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üèõÔ∏è Fixed Advanced Financial Platform</h1>
        <p>Rate Limiting D√ºzeltilmi≈ü - Bloomberg Terminal Seviyesi Analiz</p>
        <p><strong>√ñzellikler:</strong> Geni≈ületilmi≈ü ETF/Hisse Listesi | Pattern Recognition | Risk Analysis | Technical Indicators</p>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar
    with st.sidebar:
        st.markdown("### üìä Analiz Se√ßenekleri")

        analysis_mode = st.selectbox(
            "Analiz Modu",
            ["üìà Technical Analysis", "üéØ Pattern Recognition", "‚ö†Ô∏è Risk Analysis", "üîç Market Overview"]
        )

        st.markdown("### üéØ Instrument Se√ßimi")

        # ETF veya Stock se√ßimi
        instrument_type = st.radio("Tip", ["üìä ETF", "üìà Stock"])

        if instrument_type == "üìä ETF":
            etf_list = get_expanded_etf_list()
            symbol = st.selectbox("ETF Se√ß", list(etf_list.keys()),
                                format_func=lambda x: f"{x} - {etf_list[x]}")
        else:
            stock_list = get_expanded_stock_list()
            symbol = st.selectbox("Hisse Se√ß", list(stock_list.keys()),
                                format_func=lambda x: f"{x} - {stock_list[x]}")

        period = st.selectbox("Zaman Aralƒ±ƒüƒ±", ["1mo", "3mo", "6mo", "1y", "2y"], index=3)

        st.markdown("### üí° Platform √ñzellikleri")
        st.markdown("""
        - ‚úÖ 70+ ETF Coverage
        - ‚úÖ 50+ Major Stocks
        - ‚úÖ Rate Limiting Fixed
        - ‚úÖ Pattern Recognition
        - ‚úÖ Risk Analysis
        - ‚úÖ Technical Indicators
        - ‚úÖ Professional Charts
        """)

    # Ana analiz
    if symbol:
        try:
            with st.spinner(f"üì° {symbol} verileri √ßekiliyor..."):
                data, info = get_stock_data_cached(symbol, period)

            if data is None or data.empty:
                st.error("‚ùå Veri bulunamadƒ±. Ba≈üka bir sembol deneyin.")
                return

            # Basic metrics
            current_price = data['Close'].iloc[-1]
            prev_close = data['Close'].iloc[-2] if len(data) > 1 else current_price
            change = current_price - prev_close
            change_pct = (change / prev_close) * 100 if prev_close != 0 else 0

            # Display metrics
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <h3>{symbol}</h3>
                    <h2>${current_price:.2f}</h2>
                    <p class="{'positive' if change >= 0 else 'negative'}">
                        {change:+.2f} ({change_pct:+.2f}%)
                    </p>
                </div>
                """, unsafe_allow_html=True)

            with col2:
                volume = data['Volume'].iloc[-1]
                avg_volume = data['Volume'].tail(20).mean()
                st.markdown(f"""
                <div class="metric-card">
                    <h4>Volume</h4>
                    <h3>{volume:,.0f}</h3>
                    <p class="{'positive' if volume > avg_volume else 'neutral'}">
                        Avg: {avg_volume:,.0f}
                    </p>
                </div>
                """, unsafe_allow_html=True)

            with col3:
                week_52_high = data['High'].tail(252).max() if len(data) >= 252 else data['High'].max()
                week_52_low = data['Low'].tail(252).min() if len(data) >= 252 else data['Low'].min()
                st.markdown(f"""
                <div class="metric-card">
                    <h4>52W Range</h4>
                    <h3>${week_52_low:.1f} - ${week_52_high:.1f}</h3>
                    <p class="neutral">High-Low</p>
                </div>
                """, unsafe_allow_html=True)

            with col4:
                market_cap = info.get('marketCap', 0) if info else 0
                market_cap_display = f"${market_cap/1e9:.1f}B" if market_cap > 0 else "N/A"
                st.markdown(f"""
                <div class="metric-card">
                    <h4>Market Cap</h4>
                    <h3>{market_cap_display}</h3>
                    <p class="neutral">USD</p>
                </div>
                """, unsafe_allow_html=True)

            # Ana Chart
            fig = go.Figure()

            # Candlestick chart
            fig.add_trace(go.Candlestick(
                x=data.index,
                open=data['Open'],
                high=data['High'],
                low=data['Low'],
                close=data['Close'],
                name='Price'
            ))

            fig.update_layout(
                title=f"üìà {symbol} Price Chart",
                xaxis_title="Date",
                yaxis_title="Price ($)",
                template="plotly_dark",
                height=500,
                showlegend=True
            )

            st.plotly_chart(fig, use_container_width=True)

            # Analysis based on mode
            if analysis_mode == "üìà Technical Analysis":
                st.markdown("""
                <div class="analysis-card">
                    <h2>üìà Technical Analysis</h2>
                    <p>Teknik g√∂stergeler ve trend analizi</p>
                </div>
                """, unsafe_allow_html=True)

                indicators = calculate_simple_indicators(data)

                if indicators:
                    col1, col2, col3 = st.columns(3)

                    with col1:
                        st.markdown(f"""
                        <div class="metric-card">
                            <h4>üìä Moving Averages</h4>
                            <p><strong>SMA 20:</strong> ${indicators['sma_20']:.2f}</p>
                            <p><strong>SMA 50:</strong> ${indicators['sma_50']:.2f}</p>
                            <p><strong>Trend:</strong> {indicators['trend']}</p>
                        </div>
                        """, unsafe_allow_html=True)

                    with col2:
                        rsi_color = 'success-card' if 30 < indicators['rsi'] < 70 else 'risk-card'
                        st.markdown(f"""
                        <div class="{rsi_color}">
                            <h4>üìà RSI</h4>
                            <h3>{indicators['rsi']:.1f}</h3>
                            <p>{'Overbought' if indicators['rsi'] > 70 else 'Oversold' if indicators['rsi'] < 30 else 'Neutral'}</p>
                        </div>
                        """, unsafe_allow_html=True)

                    with col3:
                        trend_color = 'success-card' if indicators['trend'] == 'Bullish' else 'risk-card' if indicators['trend'] == 'Bearish' else 'analysis-card'
                        st.markdown(f"""
                        <div class="{trend_color}">
                            <h4>üìä Trend Status</h4>
                            <h3>{indicators['trend']}</h3>
                            <p>Above SMA20: {'‚úÖ' if indicators['above_sma_20'] else '‚ùå'}</p>
                        </div>
                        """, unsafe_allow_html=True)

            elif analysis_mode == "üéØ Pattern Recognition":
                st.markdown("""
                <div class="analysis-card">
                    <h2>üéØ Pattern Recognition</h2>
                    <p>Otomatik chart pattern analizi</p>
                </div>
                """, unsafe_allow_html=True)

                pattern = detect_simple_patterns(data)

                pattern_color = ('success-card' if pattern['signal'] == 'Bullish' else
                               'risk-card' if pattern['signal'] == 'Bearish' else 'analysis-card')

                col1, col2 = st.columns(2)

                with col1:
                    st.markdown(f"""
                    <div class="{pattern_color}">
                        <h3>üéØ Detected Pattern</h3>
                        <p><strong>Pattern:</strong> {pattern['pattern']}</p>
                        <p><strong>Signal:</strong> {pattern['signal']}</p>
                        <p><strong>Strength:</strong> {pattern['strength']}</p>
                    </div>
                    """, unsafe_allow_html=True)

                with col2:
                    st.markdown(f"""
                    <div class="analysis-card">
                        <h3>üìä Support & Resistance</h3>
                        <p><strong>Resistance:</strong> ${pattern['resistance']:.2f}</p>
                        <p><strong>Support:</strong> ${pattern['support']:.2f}</p>
                        <p><strong>Current:</strong> ${current_price:.2f}</p>
                    </div>
                    """, unsafe_allow_html=True)

            elif analysis_mode == "‚ö†Ô∏è Risk Analysis":
                st.markdown("""
                <div class="risk-card">
                    <h2>‚ö†Ô∏è Risk Analysis</h2>
                    <p>Professional risk metrikleri</p>
                </div>
                """, unsafe_allow_html=True)

                risk_metrics = calculate_risk_metrics(data)

                if risk_metrics:
                    col1, col2, col3, col4 = st.columns(4)

                    with col1:
                        st.markdown(f"""
                        <div class="risk-card">
                            <h4>üìâ Volatility</h4>
                            <h3>{risk_metrics['volatility']:.1%}</h3>
                            <p>Annualized</p>
                        </div>
                        """, unsafe_allow_html=True)

                    with col2:
                        st.markdown(f"""
                        <div class="risk-card">
                            <h4>üìä VaR (95%)</h4>
                            <h3>{risk_metrics['var_95']:.2%}</h3>
                            <p>Daily Risk</p>
                        </div>
                        """, unsafe_allow_html=True)

                    with col3:
                        sharpe_color = 'success-card' if risk_metrics['sharpe_ratio'] > 1 else 'analysis-card'
                        st.markdown(f"""
                        <div class="{sharpe_color}">
                            <h4>üìà Sharpe Ratio</h4>
                            <h3>{risk_metrics['sharpe_ratio']:.2f}</h3>
                            <p>Risk Adjusted</p>
                        </div>
                        """, unsafe_allow_html=True)

                    with col4:
                        st.markdown(f"""
                        <div class="risk-card">
                            <h4>üìâ Max Drawdown</h4>
                            <h3>{risk_metrics['max_drawdown']:.1%}</h3>
                            <p>Historical</p>
                        </div>
                        """, unsafe_allow_html=True)

            else:  # Market Overview
                st.markdown("""
                <div class="analysis-card">
                    <h2>üîç Market Overview</h2>
                    <p>Kapsamlƒ± piyasa durumu</p>
                </div>
                """, unsafe_allow_html=True)

                # Combined metrics
                indicators = calculate_simple_indicators(data)
                pattern = detect_simple_patterns(data)
                risk_metrics = calculate_risk_metrics(data)

                col1, col2 = st.columns(2)

                with col1:
                    if indicators:
                        st.markdown(f"""
                        <div class="analysis-card">
                            <h3>üìä Technical Summary</h3>
                            <p><strong>Trend:</strong> {indicators.get('trend', 'N/A')}</p>
                            <p><strong>RSI:</strong> {indicators.get('rsi', 0):.1f}</p>
                            <p><strong>Above SMA20:</strong> {'‚úÖ' if indicators.get('above_sma_20', False) else '‚ùå'}</p>
                        </div>
                        """, unsafe_allow_html=True)

                with col2:
                    if risk_metrics:
                        st.markdown(f"""
                        <div class="analysis-card">
                            <h3>‚ö†Ô∏è Risk Summary</h3>
                            <p><strong>Volatility:</strong> {risk_metrics.get('volatility', 0):.1%}</p>
                            <p><strong>Sharpe Ratio:</strong> {risk_metrics.get('sharpe_ratio', 0):.2f}</p>
                            <p><strong>Max Drawdown:</strong> {risk_metrics.get('max_drawdown', 0):.1%}</p>
                        </div>
                        """, unsafe_allow_html=True)

        except Exception as e:
            st.error(f"‚ùå Hata olu≈ütu: {str(e)}")
            st.info("üí° Rate limiting nedeniyle hata olabilir. Birka√ß saniye bekleyip tekrar deneyin.")

    # Footer
    st.markdown("""
    <div style="margin-top: 3rem; padding: 2rem; background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%); border-radius: 15px; text-align: center;">
        <h3>üèõÔ∏è Fixed Advanced Financial Platform</h3>
        <p>Rate Limiting D√ºzeltildi ‚Ä¢ 70+ ETF ‚Ä¢ 50+ Stock ‚Ä¢ Professional Analytics</p>
        <p><strong>Artƒ±k Bloomberg Terminal seviyesinde √ßalƒ±≈üƒ±yor!</strong></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()