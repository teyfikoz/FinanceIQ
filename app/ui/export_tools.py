"""
Export & Sharing Tools
PDF/Excel export, QR Code generation for dashboard sharing
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import io
import base64
try:
    import qrcode
    QRCODE_AVAILABLE = True
except ImportError:
    QRCODE_AVAILABLE = False


class ExportTools:
    """Export and sharing functionality"""

    def __init__(self):
        pass

    # ========== PDF Export ==========

    def export_to_pdf(self, title, data_dict):
        """
        Export data to PDF format
        Uses simple HTML-to-PDF conversion via markdown
        """
        st.subheader("üìÑ PDF Export")

        # Create PDF content as HTML
        html_content = self._create_pdf_html(title, data_dict)

        # Display preview
        with st.expander("üìã Preview PDF Content"):
            st.markdown(html_content, unsafe_allow_html=True)

        # Download button
        pdf_bytes = html_content.encode('utf-8')

        st.download_button(
            label="‚¨áÔ∏è Download PDF Report",
            data=pdf_bytes,
            file_name=f"{title}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html",
            mime="text/html",
            use_container_width=True
        )

        st.info("üí° Tip: Open the downloaded HTML file and use your browser's 'Print to PDF' feature for a professional PDF.")

    def _create_pdf_html(self, title, data_dict):
        """Create HTML content for PDF export"""

        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{title}</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    margin: 40px;
                    line-height: 1.6;
                }}
                .header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 10px;
                    text-align: center;
                    margin-bottom: 30px;
                }}
                .section {{
                    margin-bottom: 30px;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 8px;
                }}
                .metric {{
                    display: inline-block;
                    margin: 10px;
                    padding: 15px;
                    background: #f0f0f0;
                    border-radius: 5px;
                }}
                table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 10px;
                }}
                th, td {{
                    border: 1px solid #ddd;
                    padding: 12px;
                    text-align: left;
                }}
                th {{
                    background-color: #667eea;
                    color: white;
                }}
                .footer {{
                    margin-top: 50px;
                    padding-top: 20px;
                    border-top: 2px solid #ddd;
                    text-align: center;
                    color: #666;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üß† {title}</h1>
                <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>FinanceIQ - AI-Powered Financial Analysis Platform</p>
            </div>
        """

        # Add sections from data_dict
        for section_name, section_data in data_dict.items():
            html += f'<div class="section"><h2>{section_name}</h2>'

            if isinstance(section_data, pd.DataFrame):
                html += section_data.to_html(index=False, classes='data-table')
            elif isinstance(section_data, dict):
                for key, value in section_data.items():
                    html += f'<div class="metric"><strong>{key}:</strong> {value}</div>'
            else:
                html += f'<p>{section_data}</p>'

            html += '</div>'

        html += """
            <div class="footer">
                <p>üìä Generated by FinanceIQ | AI-Powered Financial Analysis</p>
                <p>¬© 2024 FinanceIQ. All rights reserved.</p>
            </div>
        </body>
        </html>
        """

        return html

    # ========== Excel Export ==========

    def export_to_excel(self, data_frames_dict, filename="financeiq_export"):
        """
        Export multiple DataFrames to Excel with multiple sheets
        """
        st.subheader("üìä Excel Export")

        if not data_frames_dict:
            st.warning("No data available to export")
            return

        # Create Excel file in memory
        output = io.BytesIO()

        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            for sheet_name, df in data_frames_dict.items():
                if isinstance(df, pd.DataFrame):
                    df.to_excel(writer, sheet_name=sheet_name[:31], index=False)

        excel_data = output.getvalue()

        # Download button
        st.download_button(
            label="‚¨áÔ∏è Download Excel File",
            data=excel_data,
            file_name=f"{filename}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )

        # Show sheets included
        st.success(f"‚úÖ Excel file ready with {len(data_frames_dict)} sheets:")
        for sheet_name in data_frames_dict.keys():
            st.write(f"- {sheet_name}")

    # ========== QR Code Generation ==========

    def generate_qr_code(self, url, description="Dashboard URL"):
        """Generate QR code for sharing dashboard URLs"""

        st.subheader("üì± QR Code Generator")

        if not QRCODE_AVAILABLE:
            st.error("QR code library not available. Install with: pip install qrcode[pil]")
            return

        try:
            # Generate QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(url)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")

            # Convert to bytes
            img_bytes = io.BytesIO()
            img.save(img_bytes, format='PNG')
            img_bytes.seek(0)

            # Display QR code
            col1, col2 = st.columns([1, 2])

            with col1:
                st.image(img_bytes, caption=description, use_container_width=True)

            with col2:
                st.markdown(f"""
                **Share this dashboard:**

                üì± **Scan the QR code** to open this dashboard on mobile devices

                üîó **URL:** `{url}`

                üí° **Use cases:**
                - Share with team members
                - Access on mobile
                - Embed in presentations
                """)

            # Download QR code
            img_bytes.seek(0)
            st.download_button(
                label="‚¨áÔ∏è Download QR Code",
                data=img_bytes,
                file_name=f"qr_code_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                mime="image/png",
                use_container_width=True
            )

        except Exception as e:
            st.error(f"Error generating QR code: {e}")

    # ========== CSV Export ==========

    def export_to_csv(self, df, filename="data_export"):
        """Simple CSV export for DataFrames"""

        csv = df.to_csv(index=False)

        st.download_button(
            label="‚¨áÔ∏è Download CSV",
            data=csv,
            file_name=f"{filename}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            use_container_width=True
        )


def create_export_ui():
    """Main UI for export tools"""

    st.title("üì§ Export & Sharing Tools")

    export_tools = ExportTools()

    tabs = st.tabs(["üìÑ PDF Export", "üìä Excel Export", "üì± QR Code", "üìã CSV Export"])

    with tabs[0]:
        st.markdown("### Export Report to PDF")

        # Sample data
        sample_data = {
            "Portfolio Summary": {
                "Total Value": "$100,000",
                "Total Return": "+15.3%",
                "Sharpe Ratio": "1.85",
                "Max Drawdown": "-8.2%"
            },
            "Top Holdings": pd.DataFrame({
                "Symbol": ["AAPL", "MSFT", "GOOGL"],
                "Value": ["$25,000", "$20,000", "$15,000"],
                "Weight": ["25%", "20%", "15%"]
            }),
            "Performance Metrics": {
                "YTD Return": "+12.5%",
                "1-Year Return": "+18.3%",
                "Volatility": "15.2%"
            }
        }

        if st.button("Generate Sample PDF", type="primary"):
            export_tools.export_to_pdf("Portfolio Report", sample_data)

    with tabs[1]:
        st.markdown("### Export Data to Excel")

        # Sample dataframes
        sample_sheets = {
            "Portfolio": pd.DataFrame({
                "Symbol": ["AAPL", "MSFT", "GOOGL", "AMZN"],
                "Shares": [100, 50, 30, 25],
                "Price": [178.50, 378.91, 140.22, 145.32],
                "Value": [17850, 18945, 4207, 3633]
            }),
            "Transactions": pd.DataFrame({
                "Date": pd.date_range("2024-01-01", periods=5),
                "Type": ["BUY", "BUY", "SELL", "BUY", "SELL"],
                "Symbol": ["AAPL", "MSFT", "AAPL", "GOOGL", "MSFT"],
                "Shares": [50, 25, 10, 15, 5]
            })
        }

        if st.button("Generate Sample Excel", type="primary"):
            export_tools.export_to_excel(sample_sheets, "portfolio_data")

    with tabs[2]:
        st.markdown("### Generate QR Code for Dashboard")

        url = st.text_input(
            "Enter Dashboard URL",
            "https://financeiq.streamlit.app",
            help="URL to encode in QR code"
        )

        description = st.text_input("Description", "FinanceIQ Dashboard")

        if st.button("Generate QR Code", type="primary"):
            export_tools.generate_qr_code(url, description)

    with tabs[3]:
        st.markdown("### Export Data to CSV")

        # Sample data
        sample_df = pd.DataFrame({
            "Date": pd.date_range("2024-01-01", periods=10),
            "Symbol": ["AAPL"] * 10,
            "Close": np.random.uniform(170, 180, 10),
            "Volume": np.random.randint(50000000, 100000000, 10)
        })

        st.dataframe(sample_df, use_container_width=True)

        if st.button("Export to CSV", type="primary"):
            export_tools.export_to_csv(sample_df, "stock_data")


if __name__ == "__main__":
    create_export_ui()
