version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: liquidity_postgres
    environment:
      POSTGRES_DB: liquidity_dashboard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: liquidity_password
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - liquidity_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: liquidity_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - liquidity_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: liquidity_backend
    environment:
      - DATABASE_URL=postgresql://postgres:liquidity_password@postgres:5432/liquidity_dashboard
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=False
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - liquidity_network

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    container_name: liquidity_dashboard
    environment:
      - API_BASE_URL=http://backend:8000/api/v1
    ports:
      - "8501:8501"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - liquidity_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: liquidity_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
    restart: unless-stopped
    networks:
      - liquidity_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  liquidity_network:
    driver: bridge